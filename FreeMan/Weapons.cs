// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using QuickType;
//
//    var weapon = Weapon.FromJson(jsonString);

namespace QuickType
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;
    using J = Newtonsoft.Json.JsonPropertyAttribute;
    using R = Newtonsoft.Json.Required;
    using N = Newtonsoft.Json.NullValueHandling;

    public partial class Weapon
    {
        [J("ID")] public long Id { get; set; }
        [J("Name")] public string Name { get; set; }
        [J("Texture")] public string Texture { get; set; }
        [J("WeaponType")] public string WeaponType { get; set; }
        [J("MarksmanshipRequirement")] public long MarksmanshipRequirement { get; set; }
        [J("Damage")] public long Damage { get; set; }
        [J("BulletSpeed")] public long BulletSpeed { get; set; }
        [J("Spread")] public decimal Spread { get; set; }
        [J("ShotNum")] public long ShotNum { get; set; }
        [J("MagSize")] public long MagSize { get; set; }
        [J("PerReload")] public long PerReload { get; set; }
        [J("Interval")] public decimal Interval { get; set; }
        [J("FiringMode")] public List<long> FiringMode { get; set; }
        [J("BurstAmount")] public long BurstAmount { get; set; }
        [J("PitchValue")] public decimal PitchValue { get; set; }
        [J("Volume")] public long Volume { get; set; }
        [J("AmmoType")] public long AmmoType { get; set; }
        [J("Attachments")] public List<long> Attachments { get; set; }
        [J("Inaccuracy")] public decimal Inaccuracy { get; set; }
        [J("FiringNoise")] public long FiringNoise { get; set; }
    }

    public partial class Weapon
    {
        public static Dictionary<string, Weapon> FromJson(string json) => JsonConvert.DeserializeObject<Dictionary<string, Weapon>>(json, QuickType.WeaponsConverter.Settings);
    }

    public static class WeaponsSerialize
    {
        public static string ToJson(this Dictionary<string, Weapon> self) => JsonConvert.SerializeObject(self, QuickType.WeaponsConverter.Settings);
    }

    internal static class WeaponsConverter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }
}
