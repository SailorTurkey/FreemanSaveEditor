// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using QuickType;
//
//    var localization = Localization.FromJson(jsonString);

namespace QuickType
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;
    using J = Newtonsoft.Json.JsonPropertyAttribute;
    using R = Newtonsoft.Json.Required;
    using N = Newtonsoft.Json.NullValueHandling;

    public partial class Localization
    {
        [J("ID")] public long Id { get; set; }
        [J("Key")] public string Key { get; set; }
        [J("Chinese")] public string Chinese { get; set; }
        [J("English")] public string English { get; set; }
        [J("Russian")] public string Russian { get; set; }
    }

    public partial class Localization
    {
        public static Dictionary<string, Localization> FromJson(string json) => JsonConvert.DeserializeObject<Dictionary<string, Localization>>(json, QuickType.LocalizationConverter.Settings);
    }

    public static class LocalizationSerialize
    {
        public static string ToJson(this Dictionary<string, Localization> self) => JsonConvert.SerializeObject(self, QuickType.LocalizationConverter.Settings);
    }

    internal static class LocalizationConverter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }
}
