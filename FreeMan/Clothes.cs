// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using QuickType;
//
//    var cloth = Cloth.FromJson(jsonString);

namespace QuickType
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;
    using J = Newtonsoft.Json.JsonPropertyAttribute;
    using R = Newtonsoft.Json.Required;
    using N = Newtonsoft.Json.NullValueHandling;

    public partial class Cloth
    {
        [J("ID")] public long Id { get; set; }
        [J("Name")] public string Name { get; set; }
        [J("FemaleModelName")] public string FemaleModelName { get; set; }
        [J("MaleModelName")] public string MaleModelName { get; set; }
        [J("IsHideHair")] public bool IsHideHair { get; set; }
        [J("IsHideHead")] public bool IsHideHead { get; set; }
        [J("IsHideBody")] public bool IsHideBody { get; set; }
        [J("IsHideLeg")] public bool IsHideLeg { get; set; }
        [J("ArmorValue")] public long ArmorValue { get; set; }
        [J("Camouflage")] public long Camouflage { get; set; }
        [J("CamouflageType")] public CamouflageType CamouflageType { get; set; }
        [J("IsSkirt")] public bool IsSkirt { get; set; }
        [J("IsMask")] public long IsMask { get; set; }
        [J("isLongShirt")] public bool IsLongShirt { get; set; }
    }

    public enum CamouflageType { DesertCamouflage, JungleCamouflage, NightCamouflage, SnowfieldCamouflage };

    public partial class Cloth
    {
        public static Dictionary<string, Cloth> FromJson(string json) => JsonConvert.DeserializeObject<Dictionary<string, Cloth>>(json, QuickType.ClothConverter.Settings);
    }

    public static class ClothSerialize
    {
        public static string ToJson(this Dictionary<string, Cloth> self) => JsonConvert.SerializeObject(self, QuickType.ClothConverter.Settings);
    }

    internal static class ClothConverter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                CamouflageTypeConverter.Singleton,
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }

    internal class CamouflageTypeConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(CamouflageType) || t == typeof(CamouflageType?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "DesertCamouflage":
                    return CamouflageType.DesertCamouflage;
                case "JungleCamouflage":
                    return CamouflageType.JungleCamouflage;
                case "NightCamouflage":
                    return CamouflageType.NightCamouflage;
                case "SnowfieldCamouflage":
                    return CamouflageType.SnowfieldCamouflage;
            }
            throw new Exception("Cannot unmarshal type CamouflageType");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (CamouflageType)untypedValue;
            switch (value)
            {
                case CamouflageType.DesertCamouflage:
                    serializer.Serialize(writer, "DesertCamouflage");
                    return;
                case CamouflageType.JungleCamouflage:
                    serializer.Serialize(writer, "JungleCamouflage");
                    return;
                case CamouflageType.NightCamouflage:
                    serializer.Serialize(writer, "NightCamouflage");
                    return;
                case CamouflageType.SnowfieldCamouflage:
                    serializer.Serialize(writer, "SnowfieldCamouflage");
                    return;
            }
            throw new Exception("Cannot marshal type CamouflageType");
        }

        public static readonly CamouflageTypeConverter Singleton = new CamouflageTypeConverter();
    }
}
