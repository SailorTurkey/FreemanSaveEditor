// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using QuickType;
//
//    var player = Player.FromJson(jsonString);

namespace QuickType
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;
    using J = Newtonsoft.Json.JsonPropertyAttribute;
    using R = Newtonsoft.Json.Required;
    using N = Newtonsoft.Json.NullValueHandling;
    using System.ComponentModel;
    using System.Runtime.Serialization;
    using FreemanSaveEditor;
    using System.Linq;

    public partial class Player
    {
        [J("Position")] public List<Position> Position { get; set; }
        [J("playerTotalKills")] public long PlayerTotalKills { get; set; }
        [J("sleeping")] public bool Sleeping { get; set; }
        [J("playerDeathes")] public long PlayerDeathes { get; set; }
        [J("partyKills")] public long PartyKills { get; set; }
        [J("support_scout")] public long SupportScout { get; set; }
        [J("support_gunfire")] public long SupportGunfire { get; set; }
        [J("support_aircraft")] public long SupportAircraft { get; set; }
        [J("partyDeathes")] public long PartyDeathes { get; set; }
        [J("battlesWon")] public long BattlesWon { get; set; }
        [J("battlesLose")] public long BattlesLose { get; set; }
        [J("moneyMade")] public long MoneyMade { get; set; }
        [J("wageNeedsToPay")] public long WageNeedsToPay { get; set; }
        [J("wouldwageNeedsToPay")] public long WouldwageNeedsToPay { get; set; }
        [J("reputation")] public long Reputation { get; set; }
        [J("prisonerAttempts")] public long PrisonerAttempts { get; set; }
        [J("MyFactionName")] public string MyFactionName { get; set; }
        [J("FactionIconName")] public string FactionIconName { get; set; }
        [J("sex")] public Sex Sex { get; set; }
        [J("characterName")] public string CharacterName { get; set; }
        [J("health")] public decimal Health { get; set; }
        [J("curExp")] public long CurExp { get; set; }
        [J("level")] public long Level { get; set; }
        [J("RenownValue")] public long RenownValue { get; set; }
        [J("constitution")] public long Constitution { get; set; }
        [J("marksmanship")] public long Marksmanship { get; set; }
        [J("intelligence")] public long Intelligence { get; set; }
        [J("agility")] public long Agility { get; set; }
        [J("leadership")] public long Leadership { get; set; }
        [J("playerPoints")] public long PlayerPoints { get; set; }
        [J("attributePoints")] public long AttributePoints { get; set; }
        [J("armorPoint")] public long ArmorPoint { get; set; }
        [J("pistolPoint")] public long PistolPoint { get; set; }
        [J("riflePoint")] public long RiflePoint { get; set; }
        [J("assaultRiflePoint")] public long AssaultRiflePoint { get; set; }
        [J("meleePoint")] public long MeleePoint { get; set; }
        [J("shotGunPoint")] public long ShotGunPoint { get; set; }
        [J("throwingPoint")] public long ThrowingPoint { get; set; }
        [J("SmgPoint")] public long SmgPoint { get; set; }
        [J("machineGunPoint")] public long MachineGunPoint { get; set; }
        [J("launcherPoint")] public long LauncherPoint { get; set; }
        [J("weaponPoint")] public long WeaponPoint { get; set; }
        [J("pistolPointTemp")] public long PistolPointTemp { get; set; }
        [J("riflePointTemp")] public long RiflePointTemp { get; set; }
        [J("assaultRiflePointTemp")] public long AssaultRiflePointTemp { get; set; }
        [J("meleePointTemp")] public long MeleePointTemp { get; set; }
        [J("shotGunPointTemp")] public long ShotGunPointTemp { get; set; }
        [J("SmgPointTemp")] public long SmgPointTemp { get; set; }
        [J("machineGunPointTemp")] public long MachineGunPointTemp { get; set; }
        [J("launcherPointTemp")] public long LauncherPointTemp { get; set; }
        [J("pistolPointContainer")] public long PistolPointContainer { get; set; }
        [J("riflePointContainer")] public long RiflePointContainer { get; set; }
        [J("assaultRiflePointContainer")] public long AssaultRiflePointContainer { get; set; }
        [J("meleePointContainer")] public long MeleePointContainer { get; set; }
        [J("shotGunPointContainer")] public long ShotGunPointContainer { get; set; }
        [J("SmgPointContainer")] public long SmgPointContainer { get; set; }
        [J("machineGunPointContainer")] public long MachineGunPointContainer { get; set; }
        [J("launcherPointContainer")] public long LauncherPointContainer { get; set; }
        [J("throwingPointContainer")] public long ThrowingPointContainer { get; set; }
        [J("throwingPointTemp")] public long ThrowingPointTemp { get; set; }
        [J("firstaid")] public long Firstaid { get; set; }
        [J("training")] public long Training { get; set; }
        [J("trading")] public long Trading { get; set; }
        [J("inventorymanagement")] public long Inventorymanagement { get; set; }
        [J("prisonermanagement")] public long Prisonermanagement { get; set; }
        [J("diplomacy")] public long Diplomacy { get; set; }
        [J("looting")] public long Looting { get; set; }
        [J("medical")] public long Medical { get; set; }
        [J("navigation")] public long Navigation { get; set; }
        [J("commanding")] public long Commanding { get; set; }
        [J("stealing")] public long Stealing { get; set; }
        [J("shirtId")] public long ShirtId { get; set; }
        [J("maskId")] public long MaskId { get; set; }
        [J("pantsId")] public long PantsId { get; set; }
        [J("helmetId")] public long HelmetId { get; set; }
        [J("armorId")] public long ArmorId { get; set; }
        [J("pistolId")] public long PistolId { get; set; }
        [J("rifleId")] public long RifleId { get; set; }
        [J("launcherId")] public long LauncherId { get; set; }
        [J("rifleScopeId_R")] public long RifleScopeIdR { get; set; }
        [J("rifleSilencerId_R")] public long RifleSilencerIdR { get; set; }
        [J("rifleScopeId_L")] public long RifleScopeIdL { get; set; }
        [J("rifleSilencerId_L")] public long RifleSilencerIdL { get; set; }
        [J("pistolSilencerId")] public long PistolSilencerId { get; set; }
        [J("misc1Id")] public long Misc1Id { get; set; }
        [J("misc2Id")] public long Misc2Id { get; set; }
        [J("misc3Id")] public long Misc3Id { get; set; }
        [J("misc4Id")] public long Misc4Id { get; set; }
        [J("misc5Id")] public long Misc5Id { get; set; }
        [J("misc6Id")] public long Misc6Id { get; set; }
        [J("misc7Id")] public long Misc7Id { get; set; }
        [J("misc8Id")] public long Misc8Id { get; set; }
        [J("misc9Id")] public long Misc9Id { get; set; }
        [J("misc10Id")] public long Misc10Id { get; set; }
        [J("misc11Id")] public long Misc11Id { get; set; }
        [J("misc12Id")] public long Misc12Id { get; set; }
        [J("pa1Id")] public long Pa1Id { get; set; }
        [J("pa2Id")] public long Pa2Id { get; set; }
        [J("pa3Id")] public long Pa3Id { get; set; }
        [J("pa4Id")] public long Pa4Id { get; set; }
        [J("faceTextureName")] public string FaceTextureName { get; set; }
        [J("headName")] public string HeadName { get; set; }
        [J("hairName")] public string HairName { get; set; }
        [J("eyeName")] public EyeName EyeName { get; set; }
        [J("hairColorIndex")] public long HairColorIndex { get; set; }
        [J("Items")] public List<MapAgentItem> Items { get; set; }
        [J("credits")] public long Credits { get; set; }
        [J("repution")] public long Repution { get; set; }
        [J("0_MapAgent")] public The0_MapAgent The0_MapAgent { get; set; }
    }

    public class MapAgentItem
    {
        [J("Id")] public long Id { get; set; }
    }

    public partial class Position
    {
        [J("X", NullValueHandling = N.Ignore)] public decimal? X { get; set; }
        [J("Y", NullValueHandling = N.Ignore)] public decimal? Y { get; set; }
        [J("Z", NullValueHandling = N.Ignore)] public decimal? Z { get; set; }
    }

    public partial class The0_MapAgent
    {
        [J("UID")] public long Uid { get; set; }
        [J("Level")] public long Level { get; set; }
        [J("ArmyId")] public long ArmyId { get; set; }
        [J("Heroid")] public long Heroid { get; set; }
        [J("ArmyName")] public string ArmyName { get; set; }
        [J("FactionId")] public long FactionId { get; set; }
        [J("SilkRoadID")] public long SilkRoadId { get; set; }
        [J("IsHaveSilkRoad")] public long IsHaveSilkRoad { get; set; }
        [J("ArmyPosition")] public SortableBindingList<Position> ArmyPosition { get; set; }
        [J("Squads")] public SortableBindingList<Squad> Squads { get; set; }
        [J("UnassignedUnits")] public UnassignedUnits UnassignedUnits { get; set; }
        [J("Prisoners")] public Prisoners Prisoners { get; set; }
    }

    public partial class Prisoners
    {
        [J("Prisoner")] public SortableBindingList<Prisoner> Prisoner { get; set; }
    }


    [Serializable]
    public partial class Prisoner 
    {
        [J("Id")] public long Id { get; set; }
        [J("Name")] public string Name { get; set; }
        [J("Sex")] public Sex Sex { get; set; }
        [J("IconName")] public string IconName { get; set; }
        [J("Exp")] public long Exp { get; set; }
        [J("Health")] public long Health { get; set; }
        [J("Level")] public long Level { get; set; }
        [J("Will")] public long Will { get; set; }
        [J("SquadUnitIndex")] public long SquadUnitIndex { get; set; }
        [J("Morale")] public long Morale { get; set; }
        [J("Injured")] public long Injured { get; set; }
        [J("Cost")] public long Cost { get; set; }
        [J("SightBonus")] public decimal SightBonus { get; set; }
        [J("NpcTag")] public NpcTag NpcTag { get; set; }
        [J("FireIntervalOverride")] public long FireIntervalOverride { get; set; }
        [J("SmgPoint")] public long SmgPoint { get; set; }
        [J("Constitution")] public long Constitution { get; set; }
        [J("AssaultRiflePoint")] public long AssaultRiflePoint { get; set; }
        [J("RiflePoint")] public long RiflePoint { get; set; }
        [J("MachineGunPoint")] public long MachineGunPoint { get; set; }
        [J("PistolPoint")] public long PistolPoint { get; set; }
        [J("Marksmanship")] public long Marksmanship { get; set; }
        [J("Agility")] public long Agility { get; set; }
        [J("HelmetId")] public long HelmetId { get; set; }
        [J("ShirtId")] public long ShirtId { get; set; }
        [J("ArmorId")] public long ArmorId { get; set; }
        [J("PantsId")] public long PantsId { get; set; }
        [J("MaskId")] public long MaskId { get; set; }
        [J("PistolId")] public long PistolId { get; set; }
        [J("RifleId")] public long RifleId { get; set; }
        [J("HeadName")] public string HeadName { get; set; }
        [J("FaceTextureName")] public string FaceTextureName { get; set; }
        [J("HairName")] public string HairName { get; set; }
        [J("EyeName")] public EyeName EyeName { get; set; }
        [J("HairColorIndex")] public long HairColorIndex { get; set; }
        [J("ArmorPoint")] public long ArmorPoint { get; set; }
        [J("ShotGunPoint")] public long ShotGunPoint { get; set; }
        [J("LauncherPoint")] public long LauncherPoint { get; set; }
        [J("ThrowingPoint")] public long ThrowingPoint { get; set; }
        [J("MISC1Id")] public long Misc1Id { get; set; }
        [J("MISC2Id")] public long Misc2Id { get; set; }
        [J("MISC3Id")] public long Misc3Id { get; set; }
        [J("MISC4Id")] public long Misc4Id { get; set; }
        [J("HeroId")] public long HeroId { get; set; }
        [J("IsHero")] public long IsHero { get; set; }
        [J("Healthy")] public long Healthy { get; set; }
        [J("FactionID")] public long FactionId { get; set; }
        [J("pirsonType")] public long PirsonType { get; set; }
        [J("LiYouNum")] public long LiYouNum { get; set; }
        [J("LiYouCoin")] public long LiYouCoin { get; set; }


        private decimal? speed;
        [JsonIgnore] public decimal? Speed { get {
                if (speed.HasValue) return speed;

                speed = Program.SolderList.Where(x => x.Id == this.Id).FirstOrDefault()?.Speed;

                return speed;
            } }

    }
     [Serializable]
    public partial class Squad
    {
        [J("Name")] public string Name { get; set; }
        [J("IconName")] public string IconName { get; set; }
        [J("SquadLefts")] public long SquadLefts { get; set; }
        [J("FormationIndex")] public long FormationIndex { get; set; }
        [J("Soldiers")] public SortableBindingList<Prisoner> Soldiers { get; set; } = new SortableBindingList<Prisoner>();

        [JsonIgnore] public Guid guid = Guid.NewGuid();

        public override string ToString()
        {
            return Name;
        }
    }

    public partial class UnassignedUnits
    {
        [J("UnassignedSoldiers")] public SortableBindingList<Prisoner> UnassignedSoldiers { get; set; }
    }

    public enum EyeName { Eye01, Eye02, Eye03, Eye04, Eye05, Eye06, Eye07, Eye08 };

    public enum Sex { Female, Male };

    public enum NpcTag { Untagged,D, Insta };

    public partial class Player
    {
        public static Player FromJson(string json) => JsonConvert.DeserializeObject<Player>(json, QuickType.PlayerConverter.Settings);
    }

    public static class PlayerSerialize
    {
        public static string ToJson(this Player self) => JsonConvert.SerializeObject(self, QuickType.PlayerConverter.Settings);
    }

    internal static class PlayerConverter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Formatting = Formatting.Indented,
            Converters =
            {
                EyeNameConverter.Singleton,
                NpcTagConverter.Singleton,
                SexConverter.Singleton,
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }

    internal class EyeNameConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(EyeName) || t == typeof(EyeName?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "":
                    return EyeName.Eye01;
                case "Eye01":
                    return EyeName.Eye01;
                case "Eye02":
                    return EyeName.Eye02;
                case "Eye03":
                    return EyeName.Eye03;
                case "Eye04":
                    return EyeName.Eye04;
                case "Eye05":
                    return EyeName.Eye05;
                case "Eye06":
                    return EyeName.Eye06;
                case "Eye07":
                    return EyeName.Eye07;
                case "Eye08":
                    return EyeName.Eye08;
            }
            throw new Exception("Cannot unmarshal type EyeName");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (EyeName)untypedValue;
            switch (value)
            {
                case EyeName.Eye01:
                    serializer.Serialize(writer, "Eye01");
                    return;
                case EyeName.Eye02:
                    serializer.Serialize(writer, "Eye02");
                    return;
                case EyeName.Eye03:
                    serializer.Serialize(writer, "Eye03");
                    return;
                case EyeName.Eye04:
                    serializer.Serialize(writer, "Eye04");
                    return;
                case EyeName.Eye05:
                    serializer.Serialize(writer, "Eye05");
                    return;
                case EyeName.Eye06:
                    serializer.Serialize(writer, "Eye06");
                    return;
                case EyeName.Eye07:
                    serializer.Serialize(writer, "Eye07");
                    return;
                case EyeName.Eye08:
                    serializer.Serialize(writer, "Eye08");
                    return;
            }
            throw new Exception("Cannot marshal type EyeName");
        }

        public static readonly EyeNameConverter Singleton = new EyeNameConverter();
    }

    internal class NpcTagConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(NpcTag) || t == typeof(NpcTag?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "D":
                    return NpcTag.D;
                case "Untagged":
                    return NpcTag.Untagged;
                case "Insta":
                    return NpcTag.Insta;
            }
            throw new Exception("Cannot unmarshal type NpcTag");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (NpcTag)untypedValue;
            switch (value)
            {
                case NpcTag.D:
                    serializer.Serialize(writer, "D");
                    return;
                case NpcTag.Untagged:
                    serializer.Serialize(writer, "Untagged");
                    return;
                case NpcTag.Insta:
                    serializer.Serialize(writer, "Insta");
                    return;
            }
            throw new Exception("Cannot marshal type NpcTag");
        }

        public static readonly NpcTagConverter Singleton = new NpcTagConverter();
    }

    internal class SexConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(Sex) || t == typeof(Sex?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "FEMALE":
                    return Sex.Female;
                case "MALE":
                    return Sex.Male;
            }
            throw new Exception("Cannot unmarshal type Sex");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (Sex)untypedValue;
            switch (value)
            {
                case Sex.Female:
                    serializer.Serialize(writer, "FEMALE");
                    return;
                case Sex.Male:
                    serializer.Serialize(writer, "MALE");
                    return;
            }
            throw new Exception("Cannot marshal type Sex");
        }

        public static readonly SexConverter Singleton = new SexConverter();
    }
}
