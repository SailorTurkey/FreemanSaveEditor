// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using QuickType;
//
//    var hero = Hero.FromJson(jsonString);

namespace QuickType
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;
    using J = Newtonsoft.Json.JsonPropertyAttribute;
    using R = Newtonsoft.Json.Required;
    using N = Newtonsoft.Json.NullValueHandling;

    public partial class Hero
    {
        [J("HeroAgents")] public List<HeroAgent> HeroAgents { get; set; }
    }

    public partial class HeroAgent
    {
        [J("city")] public string City { get; set; }
        [J("IsCanBuy")] public long IsCanBuy { get; set; }
        [J("Relationship")] public long Relationship { get; set; }
        [J("mapArmyId")] public long MapArmyId { get; set; }
        [J("HeroId")] public long HeroId { get; set; }
        [J("IsHavePartner")] public long IsHavePartner { get; set; }
        [J("Leadership")] public long Leadership { get; set; }
        [J("Navigation")] public long Navigation { get; set; }
        [J("Tactics")] public long Tactics { get; set; }
        [J("Medical")] public long Medical { get; set; }
        [J("Financial")] public long Financial { get; set; }
        [J("Governing")] public long Governing { get; set; }
        [J("PointValue")] public long PointValue { get; set; }
        [J("ConsumedPoint")] public long ConsumedPoint { get; set; }
        [J("FactionID")] public long FactionId { get; set; }
        [J("IsTalkPast")] public long IsTalkPast { get; set; }
        [J("IsTalkHobby")] public long IsTalkHobby { get; set; }
        [J("IsExitSquad")] public long IsExitSquad { get; set; }
        [J("IsCanGiftGiving")] public long IsCanGiftGiving { get; set; }
        [J("ConsumedPeopleNum")] public long ConsumedPeopleNum { get; set; }
        [J("_AI_Type")] public long AiType { get; set; }
        [J("_appointArea")] public string AppointArea { get; set; }
        [J("HelpHeroId")] public long HelpHeroId { get; set; }
        [J("HeroQA")] public List<HeroQa> HeroQa { get; set; }
        [J("SSD")] public List<Ssd> Ssd { get; set; }
        [J("QuestID")] public List<object> QuestId { get; set; }
    }

    public partial class HeroQa
    {
        [J("value")] public long Value { get; set; }
        [J("Question")] public string Question { get; set; }
        [J("Answer")] public string Answer { get; set; }
        [J("IsTalk")] public long IsTalk { get; set; }
    }

    public partial class Ssd
    {
        [J("Id")] public long Id { get; set; }
        [J("Name")] public string Name { get; set; }
        [J("Sex")] public Sex Sex { get; set; }
        [J("IconName")] public string IconName { get; set; }
        [J("Exp")] public long Exp { get; set; }
        [J("Health")] public long Health { get; set; }
        [J("Level")] public long Level { get; set; }
        [J("Will")] public long Will { get; set; }
        [J("SquadUnitIndex")] public long SquadUnitIndex { get; set; }
        [J("Morale")] public long Morale { get; set; }
        [J("Injured")] public long Injured { get; set; }
        [J("Cost")] public long Cost { get; set; }
        [J("SightBonus")] public decimal SightBonus { get; set; }
        [J("NpcTag")] public NpcTag NpcTag { get; set; }
        [J("FireIntervalOverride")] public long FireIntervalOverride { get; set; }
        [J("SmgPoint")] public long SmgPoint { get; set; }
        [J("Constitution")] public long Constitution { get; set; }
        [J("AssaultRiflePoint")] public long AssaultRiflePoint { get; set; }
        [J("RiflePoint")] public long RiflePoint { get; set; }
        [J("MachineGunPoint")] public long MachineGunPoint { get; set; }
        [J("PistolPoint")] public long PistolPoint { get; set; }
        [J("Marksmanship")] public long Marksmanship { get; set; }
        [J("Agility")] public long Agility { get; set; }
        [J("HelmetId")] public long HelmetId { get; set; }
        [J("ShirtId")] public long ShirtId { get; set; }
        [J("ArmorId")] public long ArmorId { get; set; }
        [J("PantsId")] public long PantsId { get; set; }
        [J("MaskId")] public long MaskId { get; set; }
        [J("PistolId")] public long PistolId { get; set; }
        [J("RifleId")] public long RifleId { get; set; }
        [J("HeadName")] public string HeadName { get; set; }
        [J("FaceTextureName")] public string FaceTextureName { get; set; }
        [J("HairName")] public string HairName { get; set; }
        [J("EyeName")] public string EyeName { get; set; }
        [J("HairColorIndex")] public long HairColorIndex { get; set; }
        [J("ArmorPoint")] public long ArmorPoint { get; set; }
        [J("ShotGunPoint")] public long ShotGunPoint { get; set; }
        [J("LauncherPoint")] public long LauncherPoint { get; set; }
        [J("ThrowingPoint")] public long ThrowingPoint { get; set; }
        [J("MISC1Id")] public long Misc1Id { get; set; }
        [J("MISC2Id")] public long Misc2Id { get; set; }
        [J("MISC3Id")] public long Misc3Id { get; set; }
        [J("MISC4Id")] public long Misc4Id { get; set; }
        [J("HeroId")] public long HeroId { get; set; }
        [J("IsHero")] public long IsHero { get; set; }
        [J("Healthy")] public long Healthy { get; set; }
        [J("FactionID")] public long FactionId { get; set; }
        [J("pirsonType")] public long PirsonType { get; set; }
        [J("LiYouNum")] public long LiYouNum { get; set; }
        [J("LiYouCoin")] public long LiYouCoin { get; set; }
    }
 

    public partial class Hero
    {
        public static Hero FromJson(string json) => JsonConvert.DeserializeObject<Hero>(json, QuickType.Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this Hero self) => JsonConvert.SerializeObject(self, QuickType.Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                NpcTagConverter.Singleton,
                SexConverter.Singleton,
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }
    
}
